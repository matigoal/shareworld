{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { store } from \"./../../App\";\n\nvar axios = require(\"axios\");\n\nimport { addUser } from \"../store/actionsCreator\";\n\nrequire(\"dotenv\").config();\n\nvar url = \"http://localhost:3000/\";\n\nfunction login_service(mail, password, dispatch) {\n  var loginrequest;\n  return _regeneratorRuntime.async(function login_service$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"auth.service -> login_service: mail: \" + mail);\n          console.log(\"auth.service -> login_service: password: \" + password);\n          console.log(\"auth.service -> login_service: url: \" + (url + \"auth/login\"));\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: url + \"auth/login\",\n            data: {\n              mail: mail,\n              password: password\n            }\n          }).then(function (response) {\n            console.log(\"am login_service\");\n            console.log(response.data);\n\n            if (response.status == 200) {\n              console.log(\"login service in if\");\n              console.log(\"login service after dispatch\");\n              var address = {\n                street: response.data.address.street,\n                city: response.data.address.city,\n                zipcode: response.data.address.zipcode,\n                complement: response.data.address.complement,\n                number: response.data.address.number,\n                latitude: response.data.address.latitude,\n                longitude: response.data.address.longitude\n              };\n              var user = {\n                id: response.data.user.id,\n                first_name: response.data.user.first_name,\n                last_name: response.data.user.last_name,\n                full_name: response.data.user.full_name,\n                phone: response.data.user.phone,\n                url_avatar: response.data.user.url_avatar,\n                credit: response.data.user.credit,\n                mail: response.data.user.mail,\n                note: response.data.user.note,\n                number_notes: response.data.user.number_notes,\n                address: address,\n                accessToken: response.data.accessToken,\n                refreshToken: response.data.refreshToken\n              };\n              dispatch(addUser(user));\n              console.log(\"Display user: \", store.getState().user);\n              console.log();\n              console.log(\"login service SUCCESS\");\n            }\n          }).catch(function (error) {\n            console.log(error);\n          }));\n\n        case 5:\n          loginrequest = _context.sent;\n          console.log('HHHHHHHH');\n          console.log(loginrequest);\n          return _context.abrupt(\"return\", loginrequest);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar register_service = function register_service(fistname, lastname, phone, credit, mail, password, address) {\n  var registerrequest;\n  return _regeneratorRuntime.async(function register_service$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(url + \"auth/register\");\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: url + \"auth/register\",\n            data: {\n              first_name: fistname,\n              last_name: lastname,\n              phone: phone,\n              mail: mail,\n              password: password,\n              status: \"active\",\n              credit: credit,\n              street: address.street,\n              city: address.city,\n              zipcode: address.zipcode,\n              complement: address.complement,\n              number: address.number,\n              latitude: 0,\n              longitude: 0\n            }\n          }).then(function (response) {\n            if (response.status == 200) {\n              window.localStorage.setItem(\"accesToken\", response.data);\n              console.log(response.data);\n              console.log(address.city);\n            }\n          }).catch(function (error) {\n            console.log(\"not working\");\n            console.log(error);\n          }));\n\n        case 3:\n          registerrequest = _context2.sent;\n          console.log(registerrequest);\n          return _context2.abrupt(\"return\", registerrequest);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar logout_service = function logout_service() {\n  var logoutrequest = axios({\n    method: \"POST\",\n    url: url + \"auth/logout\"\n  }).then(function (disconnect) {\n    localStorage.removeItem(\"accessToken\");\n    console.log(disconnect);\n  }).catch(function (error) {\n    console.log(\"not work\");\n  });\n};\n\nvar update_service = function update_service() {\n  var updaterequest = axios({\n    method: \"POST\",\n    url: url + \"auth/update\"\n  }).then(function (updateuser) {\n    localStorage.setItem(\"accessToken\", updateuser.data);\n    console.log(updateuser.data);\n  });\n};\n\nexport var authService = {\n  login_service: login_service,\n  register_service: register_service,\n  logout_service: logout_service\n};","map":{"version":3,"sources":["/home/kevin/Projets/perso/projet_3/front-end/front-office-mobile/appshareworld/src/services/auth.service.ts"],"names":["store","axios","require","addUser","config","url","login_service","mail","password","dispatch","console","log","method","data","then","response","status","address","street","city","zipcode","complement","number","latitude","longitude","user","id","first_name","last_name","full_name","phone","url_avatar","credit","note","number_notes","accessToken","refreshToken","getState","catch","error","loginrequest","register_service","fistname","lastname","window","localStorage","setItem","registerrequest","logout_service","logoutrequest","disconnect","removeItem","update_service","updaterequest","updateuser","authService"],"mappings":"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","sourcesContent":["import { store } from \"./../../App\";\n\n// import NsUser from './../models/NsUser';\n// import  IUserData  from './../models/NsUser';\nimport { Address_Complete } from \"./../screens/authScreen/SignUp\";\nconst axios = require(\"axios\");\n\nimport { Dispatch } from \"redux\";\n// import { useDispatch } from 'react-redux';\nimport { addUser } from \"../store/actionsCreator\";\n// import { useCallback } from 'react-redux';\n\n// import { BACK_URI } from 'react-native-dotenv';\n\nrequire(\"dotenv\").config();\n\nconst url = \"http://localhost:3000/\";\n\n// export const signupUser = createAsyncThunk(\n//   'auth/register',\n/*\n * connect: get token and save to store\n * Args:\n *  mail\n *  password\n * Return: 1 if connected or 0 if not\n */\n// Recover Adress request\n\n// ? Login method\n\nasync function login_service(\n  mail: string,\n  password: string,\n  dispatch: Dispatch<any>\n) {\n  // const dispatch: Dispatch<any> = useDispatch();\n  console.log(`auth.service -> login_service: mail: ${mail}`);\n  console.log(`auth.service -> login_service: password: ${password}`);\n  console.log(`auth.service -> login_service: url: ${url + \"auth/login\"}`);\n\n  const loginrequest = await axios({\n    method: \"POST\",\n    url: url + \"auth/login\",\n    data: {\n      mail: mail,\n      password: password,\n    },\n  })\n    .then((response: any) => {\n      console.log(\"am login_service\");\n      console.log(response.data);\n\n      if (response.status == 200) {\n        console.log(\"login service in if\");\n\n        console.log(\"login service after dispatch\");\n\n        const address: IAddress = {\n          street: response.data.address.street,\n          city: response.data.address.city,\n          zipcode: response.data.address.zipcode,\n          complement: response.data.address.complement,\n          number: response.data.address.number,\n          latitude: response.data.address.latitude,\n          longitude: response.data.address.longitude,\n        };\n        const user: IUser = {\n          id: response.data.user.id,\n          first_name: response.data.user.first_name,\n          last_name: response.data.user.last_name,\n          full_name: response.data.user.full_name,\n          phone: response.data.user.phone,\n          url_avatar: response.data.user.url_avatar,\n          credit: response.data.user.credit,\n          mail: response.data.user.mail,\n          note: response.data.user.note,\n          number_notes: response.data.user.number_notes,\n          address: address,\n          accessToken: response.data.accessToken,\n          refreshToken: response.data.refreshToken,\n        };\n\n        dispatch(addUser(user));\n        //  dispatch(displayUser())\n        console.log(\"Display user: \", store.getState().user);\n        console.log();\n\n        // window.localStorage.getItem('accesToken');\n        console.log(\"login service SUCCESS\");\n      }\n    })\n    .catch((error: any) => {\n      console.log(error);\n    });\n    console.log('HHHHHHHH');\n    \nconsole.log(loginrequest);\n\n  return loginrequest;\n}\n\n// }\n// ? Register method\n\nconst register_service = async (\n  fistname: string,\n  lastname: string,\n  phone: string,\n  credit: number,\n  mail: string,\n  password: string,\n  address: Address_Complete\n) => {\n  console.log(url + \"auth/register\");\n  const registerrequest = await axios({\n    method: \"POST\",\n    url: url + \"auth/register\",\n    data: {\n      first_name: fistname,\n      last_name: lastname,\n      phone: phone,\n      mail: mail,\n      password: password,\n      status: \"active\",\n      credit: credit,\n      street: address.street,\n      city: address.city,\n      zipcode: address.zipcode,\n      complement: address.complement,\n      number: address.number,\n      latitude: 0,\n      longitude: 0,\n    },\n  })\n    .then((response: any) => {\n      if (response.status == 200) {\n        window.localStorage.setItem(\"accesToken\", response.data);\n        console.log(response.data);\n        console.log(address.city);\n      }\n    })\n    .catch((error: any) => {\n      console.log(\"not working\");\n      console.log(error);\n    });\n    console.log(registerrequest);\n    \n    return registerrequest;\n};\n\n// ? Logout method\nconst logout_service = () => {\n  const logoutrequest = axios({\n    method: \"POST\",\n    url: url + \"auth/logout\",\n  })\n    .then((disconnect: any) => {\n      localStorage.removeItem(\"accessToken\");\n      console.log(disconnect);\n    })\n    .catch((error: any) => {\n      console.log(\"not work\");\n    });\n  //  .post(url + 'auth/logout', {\n\n  //  })\n};\n// ? Update method\n\nconst update_service = () => {\n  const updaterequest = axios({\n    method: \"POST\",\n    url: url + \"auth/update\",\n  }).then((updateuser: any) => {\n    localStorage.setItem(\"accessToken\", updateuser.data);\n    console.log(updateuser.data);\n  });\n};\n\nexport const authService = { login_service, register_service, logout_service };\n"]},"metadata":{},"sourceType":"module"}